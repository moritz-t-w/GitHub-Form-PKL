/// You can use GitHub's form schema to configure forms for supported features.
///
/// This implementation is based on the GitHub documentation page
/// ["Syntax for GitHub's form schema"](https://docs.github.com/en/communities/using-templates-to-encourage-useful-issues-and-pull-requests/syntax-for-githubs-form-schema)
/// and contains a lot of the same documentation.
module com.github.form

import "linguist.pkl"

/// Each type has unique attributes and validations.
/// /// | Type | Description |
/// | ---- | ----------- |
/// | `textarea` | A multi-line text field. |
/// | `input` | A single-line text field. |
/// | `dropdown` | A dropdown menu. |
/// | `checkboxes` | A set of checkboxes. |
typealias InputType = "textarea" |  "input" |  "dropdown" |  "checkboxes"

/// Each type has unique attributes and validations.
/// | Type | Description |
/// | ---- | ----------- |
/// | `markdown` | Markdown text that is displayed in the form to provide extra context to the user, but is **not submitted**. |
/// | `textarea` | A multi-line text field. |
/// | `input` | A single-line text field. |
/// | `dropdown` | A dropdown menu. |
/// | `checkboxes` | A set of checkboxes. |
typealias ElementType = "markdown" | InputType
/// A set of key-value pairs that determine the type of the element, the properties of the element,
/// and the constraints you want to apply to the element.
/// For some keys, the value is another set of key-value pairs.
abstract class Element {
  /// The type of element that you want to define.
  type: ElementType
  /// A set of key-value pairs that define the properties of the element.
  attributes: Class
  /// A set of key-value pairs that set constraints on the element.
  validations: Class
}

abstract class Input extends Element {
  type: InputType
  /// The identifier for the elemkent[...]. Can only use alpha-numeric characters, -, and _.
  /// Must be unique in the form definition.
  /// If provided, the id is the canonical identifier for the field in URL query parameter prefills.
  id: String(matches(Regex("^[a-zA-Z0-9-_]+$")))
}

class MarkdownAttributes {
  /// The text that is rendered. Markdown formatting is supported.
  value: String(!isEmpty)
}
/// You can use a markdown element to display Markdown in your form that provides extra context
/// to the user, but is not submitted.
class Markdown extends Element {
  type = "markdown"
  attributes: MarkdownAttributes
}


class TextAreaAttributes {
  /// A brief description of the expected user input, which is also displayed in the form.
  label: String(!isEmpty)
  /// A description of the text area to provide context or guidance, which is displayed in the form.
  description: String
  ///  A semi-opaque placeholder that renders in the text area when empty.
  placeholder: String
  /// Text that is pre-filled in the text area.
  value: String
  /// If a value is provided, submitted text will be formatted into a codeblock.
  /// When this [property] is provided, the text area will not expand for file attachments
  /// or Markdown editing.
  render: linguist.Language // should be imported from linguist.pkl
}

/// You can use a textarea element to add a multi-line text field to your form.
/// Contributors can also attach files in textarea fields.
class TextArea extends Input {
  type = "textarea"
  attributes: TextAreaAttributes
}
